 function $(selector){const elements = typeof selector === 'string' ? document.querySelectorAll(selector):selector instanceof Node ? [selector]:selector instanceof NodeList || Array.isArray(selector) ? Array.from(selector):[];return{on(event,callback){elements.forEach(el => el.addEventListener(event,callback));return this;},off(event,callback){elements.forEach(el => el.removeEventListener(event,callback));return this;},trigger(eventName){elements.forEach(el => el.dispatchEvent(new Event(eventName,{bubbles:true})));return this;},addClass(className){elements.forEach(el => el.classList.add(className));return this;},removeClass(className){elements.forEach(el => el.classList.remove(className));return this;},toggle(className){if (className){elements.forEach(el => el.classList.toggle(className));}else{elements.forEach(el =>{el.style.display = getComputedStyle(el).display === 'none' ? 'block':'none';});}return this;},hasClass(className){return [...elements].some(el => el.classList.contains(className));},text(value){if (value === undefined) return elements[0]?.textContent;elements.forEach(el => (el.textContent = value));return this;},html(value){if (value === undefined) return elements[0]?.innerHTML;elements.forEach(el => (el.innerHTML = value));return this;},val(value){if (value === undefined) return elements[0]?.value;elements.forEach(el => (el.value = value));return this;},attr(name,value){if (value === undefined) return elements[0]?.getAttribute(name);elements.forEach(el => el.setAttribute(name,value));return this;},removeAttr(name){elements.forEach(el => el.removeAttribute(name));return this;},prop(name,value){if (value === undefined) return elements[0]?.[name];elements.forEach(el => (el[name] = value));return this;},data(name,value){if (value === undefined) return elements[0]?.dataset?.[name];elements.forEach(el => (el.dataset[name] = value));return this;},show(display = 'block'){elements.forEach(el => (el.style.display = display));return this;},hide(){elements.forEach(el => (el.style.display = 'none'));return this;},fadeIn(duration = 300){elements.forEach(el =>{el.style.opacity = 0;el.style.display = 'block';el.style.transition = `opacity ${duration}ms ease`;requestAnimationFrame(() => (el.style.opacity = 1));});return this;},fadeOut(duration = 300){elements.forEach(el =>{el.style.transition = `opacity ${duration}ms ease`;el.style.opacity = 0;setTimeout(() => (el.style.display = 'none'),duration);});return this;},slideToggle(duration = 300){elements.forEach(el =>{const isHidden = getComputedStyle(el).maxHeight === '0px';el.style.transition = `max-height ${duration}ms ease`;el.style.overflow = 'hidden';if (isHidden){el.style.display = 'block';el.style.maxHeight = el.scrollHeight + 'px';}else{el.style.maxHeight = '0px';setTimeout(() => (el.style.display = 'none'),duration);}});return this;},append(content){elements.forEach(el =>{if (typeof content === 'string'){el.insertAdjacentHTML('beforeend',content);}else if (content instanceof HTMLElement){el.appendChild(content);}});return this;},prepend(content){elements.forEach(el =>{if (typeof content === 'string'){el.insertAdjacentHTML('afterbegin',content);}else if (content instanceof HTMLElement){el.insertBefore(content,el.firstChild);}});return this;},remove(){elements.forEach(el => el.remove());return this;},empty(){elements.forEach(el => (el.innerHTML = ''));return this;},detach(){const detached = [];elements.forEach(el =>{if (el.parentNode){el.parentNode.removeChild(el);detached.push(el);}});return $(detached);},clone(){const clones = [...elements].map(el => el.cloneNode(true));return $(clones.length === 1 ? clones[0]:clones);},siblings(){const sibs = [];elements.forEach(el =>{[...el.parentNode.children].forEach(child =>{if (child !== el && !sibs.includes(child)){sibs.push(child);}});});return $(sibs);},parents(){const result = [];elements.forEach(el =>{let parent = el.parentElement;while (parent){if (!result.includes(parent)){result.push(parent);}parent = parent.parentElement;}});return $(result);},next(){const nextElements = [...elements].map(el => el.nextElementSibling).filter(Boolean);return $(nextElements);},prev(){const prevElements = [...elements].map(el => el.previousElementSibling).filter(Boolean);return $(prevElements);},first(){return $(elements[0]);},last(){return $(elements[elements.length - 1]);},filter(callback){const filtered = [...elements].filter((el,i) => callback(el,i));return $(filtered);},not(selector){const filtered = [...elements].filter(el => !el.matches(selector));return $(filtered);},eq(index){return $(elements[index]);},find(selector){let found = [];elements.forEach(el => found.push(...el.querySelectorAll(selector)));return $(found);},closest(selector){const matches = [];elements.forEach(el =>{const match = el.closest(selector);if (match && !matches.includes(match)){matches.push(match);}});return $(matches);},each(callback){elements.forEach((el,i) => callback(el,i));return this;},is(selector){if (!elements.length) return false;const el = elements[0];if (selector.startsWith(':')){switch (selector){case ':checked':return el.checked === true;case ':disabled':return el.disabled === true;case ':visible':return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);default:return false;}}return el.matches(selector);},focus(){elements[0]?.focus();return this;},blur(){elements[0]?.blur();return this;},scrollTop(value){if (value === undefined) return elements[0]?.scrollTop;elements.forEach(el => (el.scrollTop = value));return this;},scrollLeft(value){if (value === undefined) return elements[0]?.scrollLeft;elements.forEach(el => (el.scrollLeft = value));return this;},height(value){if (value === undefined) return elements[0]?.offsetHeight;elements.forEach(el => (el.style.height = typeof value === 'number' ? `${value}px`:value));return this;},width(value){if (value === undefined) return elements[0]?.offsetWidth;elements.forEach(el => (el.style.width = typeof value === 'number' ? `${value}px`:value));return this;},serialize(){if (elements.length === 0 || elements[0].nodeName !== 'FORM') return '';return new URLSearchParams(new FormData(elements[0])).toString();},wrap(wrapperHTML){elements.forEach(el =>{const wrapper = document.createElement('div');wrapper.innerHTML = wrapperHTML.trim();const firstChild = wrapper.firstElementChild;if (!firstChild) return;const parent = el.parentNode;parent.insertBefore(firstChild,el);firstChild.appendChild(el);});return this;},unwrap(){elements.forEach(el =>{const parent = el.parentNode;if (!parent || parent === document.body) return;const grandparent = parent.parentNode;grandparent.insertBefore(el,parent);parent.remove();});return this;},toggleClass(className,force = undefined){elements.forEach(el =>{if (force === true){el.classList.add(className);}else if (force === false){el.classList.remove(className);}else{el.classList.toggle(className);}});return this;},css(prop,value){if (typeof prop === 'string' && value === undefined){return elements[0] ? getComputedStyle(elements[0])[prop]:undefined;}elements.forEach(el =>{if (typeof prop === 'object'){for (let key in prop){el.style[key] = prop[key];}}else if (typeof prop === 'string'){el.style[prop] = value;}});return this;},cssVar(nameOrObject,value = undefined){if (typeof nameOrObject === 'object'){for (const name in nameOrObject){if (name.startsWith('--')){elements.forEach(el =>{el.style.setProperty(name,nameOrObject[name]);});}}return this;}if (value === undefined){return elements[0] ? getComputedStyle(elements[0]).getPropertyValue(nameOrObject).trim():undefined;}if (nameOrObject.startsWith('--')){elements.forEach(el =>{el.style.setProperty(nameOrObject,value);});}return this;},animate(styles,duration = 400){elements.forEach(el =>{const start ={};const end ={};const unit ={};for (const prop in styles){const computed = getComputedStyle(el)[prop];const match = computed.match(/^([\d.]+)([a-z%]*)$/i);if (match){start[prop] = parseFloat(match[1]);unit[prop] = match[2] || '';end[prop] = parseFloat(styles[prop]);}}const startTime = performance.now();function step(now){const progress = Math.min((now - startTime) / duration,1);for (const prop in styles){const value = start[prop] + (end[prop] - start[prop]) * progress;el.style[prop] = value + unit[prop];}if (progress < 1){requestAnimationFrame(step);}}requestAnimationFrame(step);});return this;},serializeArray(){if (elements.length === 0 || elements[0].nodeName !== 'FORM') return [];const form = elements[0];const result = [];Array.from(form.elements).forEach(el =>{if (!el.name || el.disabled || el.type === 'file' || el.type === 'submit' || el.type === 'button') return;if ((el.type === 'checkbox' || el.type === 'radio') && !el.checked) return;result.push({name:el.name,value:el.value});});return result;},serializeObject(){if (elements.length === 0 || elements[0].nodeName !== 'FORM') return{};const form = elements[0];const result ={};Array.from(form.elements).forEach(el =>{if (!el.name || el.disabled || el.type === 'file' || el.type === 'submit' || el.type === 'button') return;if ((el.type === 'checkbox' || el.type === 'radio') && !el.checked) return;const name = el.name;const value = el.value;if (result.hasOwnProperty(name)){if (!Array.isArray(result[name])){result[name] = [result[name]];}result[name].push(value);}else{result[name] = value;}});return result;},colorAnimate(property = 'backgroundColor',toColor = '#ffffff',duration = 400){const parseColor = (color) =>{const ctx = document.createElement('canvas').getContext('2d');ctx.fillStyle = color;const computed = ctx.fillStyle;const m = computed.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)/);return m ? [parseInt(m[1]),parseInt(m[2]),parseInt(m[3])]:[255,255,255];};const toRGB = parseColor(toColor);elements.forEach(el =>{const fromRGB = parseColor(getComputedStyle(el)[property]);const startTime = performance.now();function step(now){const progress = Math.min((now - startTime) / duration,1);const current = fromRGB.map((start,i) => Math.round(start + (toRGB[i] - start) * progress) );el.style[property] = `rgb(${current.join(',')})`;if (progress < 1){requestAnimationFrame(step);}}requestAnimationFrame(step);});return this;},toggleAttr(name){elements.forEach(el =>{if (el.hasAttribute(name)){el.removeAttribute(name);}else{el.setAttribute(name,'');}});return this;},hasAttr(name){return [...elements].some(el => el.hasAttribute(name));},scrollTo(duration = 500){elements.forEach(el =>{const top = el.getBoundingClientRect().top + window.pageYOffset;const start = window.scrollY;const startTime = performance.now();function step(now){const progress = Math.min((now - startTime) / duration,1);window.scrollTo(0,start + (top - start) * progress);if (progress < 1) requestAnimationFrame(step);}requestAnimationFrame(step);});return this;}};}$.ready = function (callback){if (document.readyState !== 'loading'){callback();}else{document.addEventListener('DOMContentLoaded',callback);}};$.reload = function (force = false){window.location.reload(force);};$.redirect = function (url){window.location.href = url;};$.ajax = function ({url,method = 'GET',data = null,headers ={},responseType = 'json',onSuccess,onError}){method = method.toUpperCase();let body = null;let contentType = headers['Content-Type'] || 'application/x-www-form-urlencoded';if (method === 'GET' && data){const query = new URLSearchParams(data).toString();url += (url.includes('?') ? '&':'?') + query;}else if (data){if (contentType === 'application/json'){body = JSON.stringify(data);}else{body = new URLSearchParams(data).toString();}}return fetch(url,{method,headers:{'Content-Type':contentType,'X-Requested-With':'XMLHttpRequest',...headers},body:method === 'GET' ? null:body}) .then(res =>{if (!res.ok) throw new Error('Hálózati hiba:' + res.status);return responseType === 'json' ? res.json():res.text();}) .then(data =>{if (typeof onSuccess === 'function') onSuccess(data);return data;}) .catch(err =>{if (typeof onError === 'function') onError(err);else console.error(err);});};$.get = function (url,params ={}){const query = new URLSearchParams(params).toString();const fullUrl = query ? `${url}?${query}`:url;return fetch(fullUrl,{method:'GET',headers:{'X-Requested-With':'XMLHttpRequest'}}).then(res =>{if (!res.ok) throw new Error('Hiba:' + res.status);return res.json();});};$.post = function (url,data ={}){return fetch(url,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded','X-Requested-With':'XMLHttpRequest'},body:new URLSearchParams(data).toString()}).then(res => res.json());};window.$ = $;